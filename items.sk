# NBT Compound from string
#  - nbt compound from <string>

# Tag from NBT Compound
#  - tag "tag" of <nbt compound>

# Set a Tag
#  - set tag "tag" of <nbt compound> to <nbt tag>

# Delete a Tag
#  - delete tag "tag" of <nbt compound>

function get_item(id : string) :: itemtype:
    set {_item} to {itemtype::%{_id}%}

    set {_nbt} to nbt compound of {_item}
    if tag "tag;unstackable" of {_nbt} is set:
        add 1 to {unique_id::unstackable}
        set tag "tag;unstackable-unique_id" of {_nbt} to {unique_id::unstackable}

        set {_item} to item from nbt {_nbt}

    return {_item}
    

function create_itemtype(item : string, id : string, name : string, nbt : string = "{}", description : string, sell : number, buy : number, unstackable : boolean):
    set {_nbt} to nbt compound from {_nbt}

    set {_item} to {_item} parsed as itemtype
    set {_item} to {_item} with nbt {_nbt}
    set {_item} to {_item} with all flags hidden

    if {_description} is set:
        set lore of {_item} to "&7&o %{_description}%"

    set name of {_item} to "&f%{_name}%"

    set {_nbt} to nbt compound of {_item}

    if {_sell} is set:
        set tag "tag;sell" of {_nbt} to {_sell}

    if {_buy} is set:
        set tag "tag;buy" of {_nbt} to {_buy}
    
    set {_item} to item from nbt {_nbt}

    if {_unstackable} is true:
        add "&9Unstackable" to lore of {_item}

        set {_nbt} to nbt compound of {_item}
        set tag "tag;unstackable" of {_nbt} to true
        set {_item} to item from nbt {_nbt}
    
    set {itemtype::%{_id}%} to {_item}

on load:
    delete {itemtype::*}
    wait 1 tick

    load all yaml from directory "plugins/Skript/scripts/logmill-git/items/drops/"
    load all yaml from directory "plugins/Skript/scripts/logmill-git/items/axes/"

    loop all the currently loaded yaml files:
        set {_id} to yaml value "id" from loop-value
        set {_name} to yaml value "name" from loop-value
        
        set {_item} to yaml value "item" from loop-value
        set {_nbt} to yaml value "nbt" from loop-value

        set {_description} to yaml value "description" from loop-value

        set {_sell} to yaml value "sell-value" from loop-value
        set {_buy} to yaml value "buy-value" from loop-value

        set {_unstackable} to yaml value "unstackable" from loop-value

        create_itemtype({_item}, {_id}, {_name}, ({_nbt} ? "{}"), ({_description} ? "&c&oTEMPORARY DESCRIPTION."), {_sell}, {_buy}, {_unstackable})